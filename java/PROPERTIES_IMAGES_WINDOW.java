
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Aayush
 */

public class PROPERTIES_IMAGES_WINDOW extends javax.swing.JFrame {

    /**
     * Creates new form PROPERTIES_IMAGES_WINDOW
     */
    int propertyId;
    int sellerid;
    String property_image_path = "";
    public PROPERTIES_IMAGES_WINDOW(int sellerid) {
        this.sellerid = sellerid;
        initComponents();
        //set border to jpanel title
        Border panel_title_border = BorderFactory.createMatteBorder(0,0,3,0, new Color(255,255,255));
        jpanel_Title.setBorder(panel_title_border);
        //set border to image label
        Border imageLabelBorder = BorderFactory.createMatteBorder(0,0,3,0, new Color(255,255,255));
        jpanel_Title.setBorder(imageLabelBorder);
        
        propertiesTable.setDefaultEditor(Object.class, null);
        // fill the table
        fillPropertiesTableWithPropertyData();
        propertiesTable.setRowHeight(40);
        propertiesTable.setSelectionBackground(new Color(27,150,77));
        
//        width of size
        propertiesTable.getColumnModel().getColumn(4).setPreferredWidth(35);
        propertiesTable.getColumnModel().getColumn(5).setPreferredWidth(35);
        //width of id
        propertiesTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        
    }
    //fill table with property data
    public void fillPropertiesTableWithPropertyData()
    {
        P_PROPERTY property = new P_PROPERTY(sellerid);
        ArrayList<P_PROPERTY> propertyList = property.propertiesList();
        
        //columns and rows
        String[] colNames = {"ID", "Name","Locality","city","size","BHK"};
        Object[][] rows = new Object[propertyList.size()][colNames.length];
        
        //add Data from list to rows
        for(int i =0;i<propertyList.size();i++)
        {
            rows[i][0] = propertyList.get(i).getPID();
            rows[i][1] = propertyList.get(i).getName();
            rows[i][2] = propertyList.get(i).getLocality();
            rows[i][3] = propertyList.get(i).getCity();
            rows[i][4] = propertyList.get(i).getSize();
            rows[i][5] = propertyList.get(i).getBedrooms();
    
        }
        
//        DefaultTableModel model =  (DefaultTableModel)propertiesTable.getModel();
//        model.addRow(rows);
    propertiesTable.setModel(new DefaultTableModel(rows,colNames));
        
    }
    
    //method to resize the image according to the space
    //we also need it to allow a byte[] paramter
    public ImageIcon resizeImage(String filePath,byte [] byteImage)
    {
        ImageIcon pic;
        if(byteImage!= null) pic = new ImageIcon(byteImage);
        else pic = new ImageIcon(filePath);
            
        Image img = pic.getImage().getScaledInstance(457, 283,Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img);
        return image;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jpanel_Title = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        browseImage = new javax.swing.JButton();
        removeImage = new javax.swing.JButton();
        addImage = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        imagesList = new javax.swing.JList<>();
	setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setMaximumSize(new java.awt.Dimension(1024, 768));

        jpanel_Title.setBackground(new java.awt.Color(0, 51, 153));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PROPERTY IMAGES");

        javax.swing.GroupLayout jpanel_TitleLayout = new javax.swing.GroupLayout(jpanel_Title);
        jpanel_Title.setLayout(jpanel_TitleLayout);
        jpanel_TitleLayout.setHorizontalGroup(
            jpanel_TitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_TitleLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanel_TitleLayout.setVerticalGroup(
            jpanel_TitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_TitleLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        imagePanel.setBackground(new java.awt.Color(102, 204, 255));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );

        browseImage.setBackground(new java.awt.Color(153, 153, 255));
        browseImage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        browseImage.setText("Browse");
        browseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImageActionPerformed(evt);
            }
        });

        removeImage.setBackground(new java.awt.Color(153, 153, 255));
        removeImage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        removeImage.setText("Remove");
        removeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeImageActionPerformed(evt);
            }
        });

        addImage.setBackground(new java.awt.Color(153, 153, 255));
        addImage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addImage.setText("Add");
        addImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageActionPerformed(evt);
            }
        });

        propertiesTable.setBackground(new java.awt.Color(204, 204, 255));
        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        propertiesTable.setAutoResizeMode(0);
        propertiesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                propertiesTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(propertiesTable);

        imagesList.setBackground(new java.awt.Color(204, 204, 255));
        imagesList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        imagesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(imagesList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpanel_Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(browseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(addImage, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(removeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jpanel_Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(browseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addImage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select The Property Image.");
        fileChooser.setCurrentDirectory(new File("C:\\Users\\Aayush\\OneDrive\\Pictures\\pics for dbs"));
        
        //file extension
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Images", ".jpg",".png","jpeg");
        fileChooser.addChoosableFileFilter(fileFilter);
        
        int fileState = fileChooser.showSaveDialog(null);
        if (fileState == JFileChooser.APPROVE_OPTION)
        {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            imageLabel.setIcon(resizeImage(path,null));
            property_image_path = path;
        }    
    }//GEN-LAST:event_browseImageActionPerformed

    private void addImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageActionPerformed
        // TODO add your handling code here:
        P_PROPERTY property = new P_PROPERTY(sellerid);
        
        if(propertyId!=0)
        {    
        if(property.addImage(propertyId, property_image_path))
        {
            JOptionPane.showMessageDialog(null,"Image Added To This Property","Add Image",1);   
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Image Not Added To This Property","Add Image",2);
        }
        }
        else 
        {
            JOptionPane.showMessageDialog(null,"Select The Property First","Property Not Selected",2);
        }
        
    }//GEN-LAST:event_addImageActionPerformed

    private void removeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeImageActionPerformed
        // TODO add your handling code here:
        try {
                String selectedListItem = String.valueOf(imagesList.getSelectedValue());
                Integer imageId = Integer.valueOf(selectedListItem);
                //confirmation before deleting
                int yes_or_no = JOptionPane.showConfirmDialog(null, "Do You Want To Delete This Image","Delete Image",JOptionPane.YES_NO_OPTION);

                if(yes_or_no == JOptionPane.YES_OPTION)
                {
                    if(new P_PROPERTY(sellerid).removeImageById(imageId))
                    {
                        JOptionPane.showMessageDialog(null, "Property Image Deleted", "Delete Image", 1);
                        imageLabel.setIcon(null);  
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Operation Failed, Image Not Deleted.", "Delete Image", 2);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "No Image Selected", "Delete Image", 2);
        }
        
        
    }//GEN-LAST:event_removeImageActionPerformed

    private void propertiesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_propertiesTableMouseClicked
        // TODO add your handling code here:
        //get pid from table and selected rowIndex
        int rowIndex = propertiesTable.getSelectedRow();
        propertyId  =Integer.valueOf(propertiesTable.getValueAt(rowIndex, 0).toString());
        
        //display the selected property image list in list
        fillTypeList();
        
    }//GEN-LAST:event_propertiesTableMouseClicked

    private void imagesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagesListMouseClicked
        // TODO add your handling code here:
        //display image whichever is selected by creating a funtion to pair image by id
        String selectedListItem = String.valueOf(imagesList.getSelectedValue());
        Integer imageId = Integer.valueOf(selectedListItem);
        byte[] image = new P_PROPERTY(sellerid).getImageById(imageId);
        resizeImage("",image);
        imageLabel.setIcon(resizeImage("", image));
        
    }//GEN-LAST:event_imagesListMouseClicked
    
    //function to fill the Jlist with the selected property images
    public void fillTypeList ()
    {
    HashMap<byte[], Integer> imagesListMap = new P_PROPERTY(sellerid).propertyImagesList(propertyId);
    DefaultListModel listModel = new DefaultListModel();
    int i = 0;
    for(Integer id: imagesListMap.values())
    {
            listModel.add(i,id);
            i++;    
        }
        imagesList.setModel(listModel);
}
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PROPERTIES_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PROPERTIES_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PROPERTIES_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PROPERTIES_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PROPERTIES_IMAGES_WINDOW(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addImage;
    private javax.swing.JButton browseImage;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JList<String> imagesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel jpanel_Title;
    private javax.swing.JTable propertiesTable;
    private javax.swing.JButton removeImage;
    // End of variables declaration//GEN-END:variables
}
